import{_ as s,c as a,o as n,a as l,d as t,e}from"./app.57affbbb.js";const x=JSON.parse('{"title":"组件","description":"","frontmatter":{"title":"组件","order":2},"headers":[{"level":2,"title":"组件属性类型","slug":"组件属性类型","link":"#组件属性类型","children":[]},{"level":2,"title":"公共属性列表","slug":"公共属性列表","link":"#公共属性列表","children":[]},{"level":2,"title":"App 平台 iOS 端软键盘上方横条去除方案","slug":"app-平台-ios-端软键盘上方横条去除方案","link":"#app-平台-ios-端软键盘上方横条去除方案","children":[]},{"level":2,"title":"关于软键盘弹出的逻辑说明","slug":"关于软键盘弹出的逻辑说明","link":"#关于软键盘弹出的逻辑说明","children":[]},{"level":2,"title":"关于软键盘收起的逻辑说明","slug":"关于软键盘收起的逻辑说明","link":"#关于软键盘收起的逻辑说明","children":[]}],"relativePath":"pages/uniapp/base/component.md","lastUpdated":1676993602000}'),o={name:"pages/uniapp/base/component.md"},p=l(`<h1 id="组件概述" tabindex="-1">组件概述 <a class="header-anchor" href="#组件概述" aria-hidden="true">#</a></h1><p>所有组件与属性名都是小写，单词之间以连字符<code>-</code>连接。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component-name</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">property1</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">property2</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    content</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">component-name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>每个<code>vue</code>文件的根节点必须为 <code>&lt;template&gt;</code>，且这个 <code>&lt;template&gt;</code> 下只能且必须有一个根 <code>&lt;view&gt;</code> 组件</p></blockquote><h2 id="组件属性类型" tabindex="-1">组件属性类型 <a class="header-anchor" href="#组件属性类型" aria-hidden="true">#</a></h2>`,5),c=t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"类型"),t("th",{style:{"text-align":"left"}},"注解")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"Boolean")]),t("td",{style:{"text-align":"left"}},[e("组件写该属性，其值都为 "),t("code",null,"true"),e("，只有组件上没有写该属性时，属性值才为 "),t("code",null,"false"),e("。如果属性值为变量，变量的值会被转换为 "),t("code",null,"Boolean"),e(" 类型。")])]),t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"Number")]),t("td",{style:{"text-align":"left"}},"1, 2.5")]),t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"String")]),t("td",{style:{"text-align":"left"}},'"string"')]),t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"Array")]),t("td",{style:{"text-align":"left"}},'[ 1, "string" ]')]),t("tr",{"key:":"",value:""},[t("td",{style:{"text-align":"left"}},[t("code",null,"Object")]),t("td",{style:{"text-align":"left"}})]),t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"EventHandler")]),t("td",{style:{"text-align":"left"}},[t("code",null,"handlerName"),e(" 是 methods 中定义的事件处理函数名")])]),t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"Any")]),t("td",{style:{"text-align":"left"}})])])],-1),d=l(`<h2 id="公共属性列表" tabindex="-1">公共属性列表 <a class="header-anchor" href="#公共属性列表" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th><th style="text-align:left;">注解</th></tr></thead><tbody><tr><td style="text-align:left;">id</td><td style="text-align:left;">String</td><td style="text-align:left;">组件的唯一标示</td><td style="text-align:left;">一般用于获取组件上下文对象</td></tr><tr><td style="text-align:left;"><code>ref</code></td><td style="text-align:left;">String</td><td style="text-align:left;">vue 组件唯一标示</td><td style="text-align:left;">用来给子组件注册引用信息</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">String</td><td style="text-align:left;">组件的样式类</td><td style="text-align:left;">在对应的 css 中定义的样式类</td></tr><tr><td style="text-align:left;">style</td><td style="text-align:left;">String</td><td style="text-align:left;">组件的内联样式</td><td style="text-align:left;">可以动态设置的内联样式</td></tr><tr><td style="text-align:left;"><code>hidden</code></td><td style="text-align:left;">Boolean</td><td style="text-align:left;">组件是否隐藏</td><td style="text-align:left;">所有组件默认是显示的</td></tr><tr><td style="text-align:left;"><code>data-*</code></td><td style="text-align:left;">Any</td><td style="text-align:left;">自定义属性</td><td style="text-align:left;">组件触发事件，会发送给事件处理函数</td></tr><tr><td style="text-align:left;"><code>@*</code></td><td style="text-align:left;">EventHandler</td><td style="text-align:left;">组件的事件</td><td style="text-align:left;">详见各组件详细文档，事件绑定参考</td></tr></tbody></table><h1 id="实战" tabindex="-1">实战 <a class="header-anchor" href="#实战" aria-hidden="true">#</a></h1><h2 id="app-平台-ios-端软键盘上方横条去除方案" tabindex="-1">App 平台 iOS 端软键盘上方横条去除方案 <a class="header-anchor" href="#app-平台-ios-端软键盘上方横条去除方案" aria-hidden="true">#</a></h2><p><code>pages.json</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app-plus</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">softinputNavBar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>js</code>：动态设置<code>softinputNavBar</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$scope</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$getAppWebview</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setStyle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">softinputNavBar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//this.$scope.$getAppWebview()相当于html5plus里的plus.webview.currentWebview()。在uni-app里vue页面直接使用plus.webview.currentWebview()无效，非v3编译模式使用this.$mp.page.$getAppWebview()</span></span>
<span class="line"></span></code></pre></div><h2 id="关于软键盘弹出的逻辑说明" tabindex="-1">关于软键盘弹出的逻辑说明 <a class="header-anchor" href="#关于软键盘弹出的逻辑说明" aria-hidden="true">#</a></h2><p>App 平台软键盘弹出有 <code>adjustResize|adjustPan</code> 两种模式，默认为 ad~justPan 模式，小程序平台只支持 <code>adjustPan</code> 模式，H5 平台因不同浏览器而异</p><ul><li><code>adjustResize</code>：软键盘弹出时，webview 窗体<strong>高度挤压</strong>。<em>屏幕高度= <code>webview</code>窗体高度+软键盘高度</em></li><li><code>adjustPan</code>：软键盘弹出时，webview 窗体高度不变，<strong>窗体上推</strong></li></ul><p><code>pages.json</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app-plus</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">softinputMode</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">adjustResize</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><em>Tips</em></p><ul><li><code>adjustResize</code>模式在<code>Android App</code>上，因为要重设 webview 窗体高度，可能会在个别安卓机型闪现灰屏或漏出下层页面内容。</li><li>小程序端在 input 聚焦期间，<em>避免使用 <code>css</code> 动画</em>。</li><li><em>禁止点击其他位置收起键盘</em>，可以监听<code>touch</code>事件并使用<code>prevent</code>修饰符（仅支持 App-v3、H5，其他平台可以通过设置<code>focus</code>来使输入框重新获取焦点），例如在确认按钮上使用：<code>@touchend.prevent=&quot;onTap&quot;</code></li></ul><h2 id="关于软键盘收起的逻辑说明" tabindex="-1">关于软键盘收起的逻辑说明 <a class="header-anchor" href="#关于软键盘收起的逻辑说明" aria-hidden="true">#</a></h2><ul><li><code>Android</code>：软键盘弹出，<em>点击 back 或点击非置焦区域</em>可收起软键盘</li><li><code>iOS</code>：软键盘上方有<em>带有“完成”的横条</em>，则需要<em>点完成</em>才能收起键盘；如果<em>无横条</em>，则点击非*<code>input/textarea</code>区域*可收起软键盘</li></ul><blockquote><p>隐藏软键盘 api：<code>uni.hideKeyboard()</code></p></blockquote>`,18),i=[p,c,d];function r(y,u,D,g,h,F){return n(),a("div",null,i)}const A=s(o,[["render",r]]);export{x as __pageData,A as default};
